#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import time
import curses

NUMBERS = [
        [
            [1, 1, 1, 1, 1, 1],
            [1, 1, 0, 0, 1, 1],
            [1, 1, 0, 0, 1, 1],
            [1, 1, 0, 0, 1, 1],
            [1, 1, 1, 1, 1, 1]
        ],
        [
            [0, 0, 0, 0, 1, 1],
            [0, 0, 0, 0, 1, 1],
            [0, 0, 0, 0, 1, 1],
            [0, 0, 0, 0, 1, 1],
            [0, 0, 0, 0, 1, 1]
        ],
        [
            [1, 1, 1, 1, 1, 1],
            [0, 0, 0, 0, 1, 1],
            [1, 1, 1, 1, 1, 1],
            [1, 1, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1]
        ],
        [
            [1, 1, 1, 1, 1, 1],
            [0, 0, 0, 0, 1, 1],
            [1, 1, 1, 1, 1, 1],
            [0, 0, 0, 0, 1, 1],
            [1, 1, 1, 1, 1, 1]
        ],
        [
            [1, 1, 0, 0, 1, 1],
            [1, 1, 0, 0, 1, 1],
            [1, 1, 1, 1, 1, 1],
            [0, 0, 0, 0, 1, 1],
            [0, 0, 0, 0, 1, 1]
        ],
        [
            [1, 1, 1, 1, 1, 1],
            [1, 1, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1],
            [0, 0, 0, 0, 1, 1],
            [1, 1, 1, 1, 1, 1]
        ],
        [
            [1, 1, 1, 1, 1, 1],
            [1, 1, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1],
            [1, 1, 0, 0, 1, 1],
            [1, 1, 1, 1, 1, 1]
        ],
        [
            [1, 1, 1, 1, 1, 1],
            [0, 0, 0, 0, 1, 1],
            [0, 0, 0, 0, 1, 1],
            [0, 0, 0, 0, 1, 1],
            [0, 0, 0, 0, 1, 1],
        ],
        [
            [1, 1, 1, 1, 1, 1],
            [1, 1, 0, 0, 1, 1],
            [1, 1, 1, 1, 1, 1],
            [1, 1, 0, 0, 1, 1],
            [1, 1, 1, 1, 1, 1]
        ],
        [
            [1, 1, 1, 1, 1, 1],
            [1, 1, 0, 0, 1, 1],
            [1, 1, 1, 1, 1, 1],
            [0, 0, 0, 0, 1, 1],
            [1, 1, 1, 1, 1, 1]
        ]
    ]

SYMBOL = 'â–ˆ'
def render_char(char, stdsrc, offset_y, offset_x):
    global NUMBERS, SYMBOL

    if char == ':':
        stdsrc.addch(offset_y + 1, offset_x, SYMBOL, curses.color_pair(1))
        stdsrc.addch(offset_y + 1, offset_x + 1, SYMBOL, curses.color_pair(1))

        stdsrc.addch(offset_y + 3, offset_x, SYMBOL, curses.color_pair(1))
        stdsrc.addch(offset_y + 3, offset_x + 1, SYMBOL, curses.color_pair(1))
        return 2


    col, row = 0, 0
    for arr in NUMBERS[int(char)]:
        col = 0
        for b in arr:
            if b:
                stdsrc.addch(offset_y + row, offset_x + col, SYMBOL, curses.color_pair(1))
            col += 1
        row += 1
    return 6

def render(delta, stdsrc):
    hours = (delta / 60 / 60)
    minutes = (delta / 60) % 60
    seconds = (delta) % 60
    
    stdsrc.erase()
    if hours < 1:
        output_string = ('%02d:%02d' % (minutes, seconds))
    else:
        if hours < 10:
            output_string = ('%02d:%02d:%02d' % (hours, minutes, seconds))
        else:
            output_string = ('%d:%02d:%02d' % (hours, minutes, seconds))

    x, y = 2, 1
    for char in output_string:
        x += render_char(char, stdsrc, y, x) + 2
    stdsrc.refresh()

def main(stdscr):
    curses.noecho()
    curses.cbreak()
    curses.curs_set(0)
    curses.start_color()
    curses.use_default_colors()

    stdscr.keypad(1)
    stdscr.nodelay(1)

    curses.init_pair(1, curses.COLOR_BLUE, curses.COLOR_BLUE)

    start = time.time()
    
    stop_begin = None
    stop_delta = 0
    stop = False

    while True:
        c = stdscr.getch()
        if c == ord('q') or c == ord('Q'):
            return
        if c == ord(' '):
            if not stop:
                stop = True
                stop_begin = time.time()
            else:
                stop = False
                stop_delta += time.time() - stop_begin

        if not stop:
            cur = time.time()
            delta = max(cur - start - stop_delta, 0)
            render(delta, stdscr)
        time.sleep(0.5)

if __name__ == '__main__':
    try:
        curses.wrapper(main)
    except KeyboardInterrupt:
        pass

